;;;; Author: Christopher Segale
;;;; Version: 1.0

(ql:quickload "lispbuilder-sdl")
(ql:quickload "lispbuilder-sdl-ttf")
(ql:quickload "lispbuilder-sdl-image")

(defun winp (g p1 p2)
  (labels ((rowp (p r1 r2 r3)
             (char-equal p r1 r2 r3))
           (grid-char (g x y)
             (char (aref g x y) 0))
           (horizontalp (g p)
             (or (rowp p (grid-char g 0 0) (grid-char g 0 1) (grid-char g 0 2))
                 (rowp p (grid-char g 1 0) (grid-char g 1 1) (grid-char g 1 2))
                 (rowp p (grid-char g 2 0) (grid-char g 2 1) (grid-char g 2 2))))
           (verticalp (g p)
             (or (rowp p (grid-char g 0 0) (grid-char g 1 0) (grid-char g 2 0))
                 (rowp p (grid-char g 0 1) (grid-char g 1 1) (grid-char g 2 1))
                 (rowp p (grid-char g 0 2) (grid-char g 1 2) (grid-char g 2 2))))
           (diagonalp (g p)
             (or (rowp p (grid-char g 0 0) (grid-char g 1 1) (grid-char g 2 2))
                 (rowp p (grid-char g 0 2) (grid-char g 1 1) (grid-char g 2 0))))
           (rowsp (g p)
             (or (horizontalp g p) (verticalp g p) (diagonalp g p))))
    (if (rowsp g p1)
      p1
      (if (rowsp g p2)
        p2
        nil))))

(defun tic-tac-toe ()
  (let ((player1 "X")
        (player2 "O")
        current
        winner
        (turns 1)
        (grid (make-array '(3 3) :initial-element " "))
        (pressed (make-array '(3 3) :initial-element nil)))
    (sdl:with-init ()
      (sdl:window 900 600 :title-caption "tic-tac-toe")
      (setf (sdl:frame-rate) 30)
      (sdl:with-events ()
        (:quit-event () t)
        (:sdl-quit-on-exit
          (sdl:push-quit-event))
        (:idle ()
          (unless (sdl:initialise-default-font (make-instance 'sdl:ttf-font-definition :size 250 :filename "arial.ttf"))
            (error "cannot create font."))
          (if (zerop (mod turns 2))
            (setf current player2)
            (setf current player1))
          (sdl:draw-surface (sdl:load-image "grid.jpg"))
          (when (sdl:mouse-left-p)
            (when (and (< (sdl:mouse-x) 300) (< (sdl:mouse-y) 195) (not (aref pressed 0 0)))
              (setf (aref pressed 0 0) t)
              (setf (aref grid 0 0) current)
              (incf turns))
            (when (and (and (> (sdl:mouse-x) 300) (< (sdl:mouse-x) 600)) (< (sdl:mouse-y) 195) (not (aref pressed 0 1)))
              (setf (aref pressed 0 1) t)
              (setf (aref grid 0 1) current)
              (incf turns))
            (when (and (and (> (sdl:mouse-x) 600) (< (sdl:mouse-x) 900)) (< (sdl:mouse-y) 195) (not (aref pressed 0 2)))
              (setf (aref pressed 0 2) t)
              (setf (aref grid 0 2) current)
              (incf turns))
            (when (and (< (sdl:mouse-x) 300) (and (> (sdl:mouse-y) 195) (< (sdl:mouse-y) 400)) (not (aref pressed 1 0)))
              (setf (aref pressed 1 0) t)
              (setf (aref grid 1 0) current)
              (incf turns))
            (when (and (and (> (sdl:mouse-x) 300) (< (sdl:mouse-x) 600)) (and (> (sdl:mouse-y) 195) (< (sdl:mouse-y) 400)) (not (aref pressed 1 1)))
              (setf (aref pressed 1 1) t)
              (setf (aref grid 1 1) current)
              (incf turns))
            (when (and (and (> (sdl:mouse-x) 600) (< (sdl:mouse-x) 900)) (and (> (sdl:mouse-y) 195) (< (sdl:mouse-y) 400)) (not (aref pressed 1 2)))
              (setf (aref pressed 1 2) t)
              (setf (aref grid 1 2) current)
              (incf turns))
            (when (and (< (sdl:mouse-x) 300) (> (sdl:mouse-y) 400) (not (aref pressed 2 0)))
              (setf (aref pressed 2 0) t)
              (setf (aref grid 2 0) current)
              (incf turns))
            (when (and (and (> (sdl:mouse-x) 300) (< (sdl:mouse-x) 600)) (> (sdl:mouse-y) 400) (not (aref pressed 2 1)))
              (setf (aref pressed 2 1) t)
              (setf (aref grid 2 1) current)
              (incf turns))
            (when (and (and (> (sdl:mouse-x) 600) (< (sdl:mouse-x) 900)) (> (sdl:mouse-y) 400) (not (aref pressed 2 2)))
              (setf (aref pressed 2 2) t)
              (setf (aref grid 2 2) current)
              (incf turns)))
          (setf winner (winp grid (char player1 0) (char player2 0)))
          (if (not winner)
            (progn
              (sdl:draw-string-solid-* (aref grid 0 0) 60 -40 :color sdl:*black*)
              (sdl:draw-string-solid-* (aref grid 0 1) 360 -40 :color sdl:*black*)
              (sdl:draw-string-solid-* (aref grid 0 2) 660 -40 :color sdl:*black*)
              (sdl:draw-string-solid-* (aref grid 1 0) 60 165 :color sdl:*black*)
              (sdl:draw-string-solid-* (aref grid 1 1) 360 165 :color sdl:*black*)
              (sdl:draw-string-solid-* (aref grid 1 2) 660 165 :color sdl:*black*)
              (sdl:draw-string-solid-* (aref grid 2 0) 60 365 :color sdl:*black*)
              (sdl:draw-string-solid-* (aref grid 2 1) 360 365 :color sdl:*black*)
              (sdl:draw-string-solid-* (aref grid 2 2) 660 365 :color sdl:*black*))
            (if (char-equal winner (char player1 0))
              (sdl:draw-string-solid-* "X Wins!" 20 165 :color sdl:*black*)
              (if (char-equal winner (char player2 0))
                (sdl:draw-string-solid-* "O Wins!" 20 165 :color sdl:*black*))))
            (sdl:update-display))))))
